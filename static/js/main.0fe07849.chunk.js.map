{"version":3,"sources":["contexts/TimeContext.js","contexts/TimeZoneContext.js","components/Clock.js","components/TimeZonePicker.js","App.js","serviceWorker.js","index.js"],"names":["TimeContext","createContext","TimeProvider","props","_useState","useState","Date","_useState2","Object","slicedToArray","time","setTime","checkTime","useEffect","interval","setInterval","clearInterval","react_default","a","createElement","Provider","value","children","TimeZoneContext","TimeZoneProvider","defaultTimeZone","Intl","DateTimeFormat","resolvedOptions","timeZone","setTimeZone","_useState3","_useState4","allTimeZones","setAllTimeZones","fetch","then","response","json","_ref","zones","filter","zone","zoneName","startsWith","map","formatName","zoneNameSegments","split","city","slice","join","region","concat","data","getTimeZones","query","matches","toLowerCase","sort","b","Clock","useContext","_useContext2","id","toLocaleDateString","weekday","year","month","day","toLocaleTimeString","TimeZonePicker","_useContext","setMatches","searchBar","useRef","document","addEventListener","handleClickAway","removeEventListener","event","target","closest","search","current","type","autoComplete","placeholder","onChange","onFocus","ref","localTime","displayName","key","onClick","handleSelection","className","App","TimeContext_TimeProvider","TimeZoneContext_TimeZoneProvider","components_Clock","components_TimeZonePicker","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0fe07849.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from 'react'\n\nconst TimeContext = createContext()\n\nconst TimeProvider = props => {\n  const [time, setTime] = useState(new Date())\n\n  const checkTime = () => {\n    setTime(new Date())\n  }\n\n  useEffect(\n    () => {\n      const interval = setInterval(checkTime, 100)\n      return () => { clearInterval(interval) }\n    },\n    []\n  )\n\n  return(\n    <TimeContext.Provider value={{time}}>\n      { props.children }\n    </TimeContext.Provider>\n  )\n}\n\nexport { TimeContext, TimeProvider }\n","import React, { createContext, useState, useEffect } from 'react'\n\nconst TimeZoneContext = createContext()\n\nconst TimeZoneProvider = props => {\n  const defaultTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone\n  const [timeZone, setTimeZone] = useState(defaultTimeZone)\n  const [allTimeZones, setAllTimeZones] = useState([])\n\n  useEffect(\n    () => {\n      fetch('http://api.timezonedb.com/v2.1/list-time-zone?key=02GNRRUJEWYG&format=json')\n        .then(response => response.json())\n        .then(({zones}) => {\n          setAllTimeZones(\n            zones.filter(zone => !zone.zoneName.startsWith(\"Antarctica\"))\n            .map(zone => zone.zoneName)\n          )\n        })\n    },\n    []\n  )\n\n  const getTimeZones = query => {\n    if (!query) return []\n    let matches = allTimeZones.filter(zone => (\n      formatName(zone).toLowerCase().startsWith(query.toLowerCase())\n    ))\n    matches.sort((a, b) => {\n      if (formatName(a) < formatName(b)) return -1\n      if (formatName(b) > formatName(a)) return 1\n      return 0\n    })\n    return matches\n  }\n\n  const formatName = timeZone => {\n    const zoneNameSegments = timeZone.split(\"/\")\n    const city = zoneNameSegments.slice(-1)[0].split(\"_\").join(\" \")\n    const region = zoneNameSegments[0]\n    return `${city} (${region})`\n  }\n\n  const data = { timeZone, setTimeZone, getTimeZones, formatName }\n\n  return(\n    <TimeZoneContext.Provider value={data}>\n      { props.children }\n    </TimeZoneContext.Provider>\n  )\n}\n\nexport { TimeZoneContext, TimeZoneProvider }\n","import React, { useContext } from 'react'\nimport { TimeContext } from '../contexts/TimeContext'\nimport { TimeZoneContext } from '../contexts/TimeZoneContext'\n\nconst Clock = () => {\n  const { time } = useContext(TimeContext)\n  const { timeZone, formatName } = useContext(TimeZoneContext)\n  return(\n    <main>\n      <div id=\"current-date\">\n        {\n          time.toLocaleDateString(\n            \"en-US\",\n            {\n              weekday: 'long',\n              year: 'numeric',\n              month: 'long',\n              day: 'numeric',\n              timeZone\n            }\n          )\n        }\n      </div>\n      <div id=\"current-time\">\n        { time.toLocaleTimeString(\"en-US\", { timeZone }) }\n      </div>\n      <div id=\"current-zone\">\n        { formatName(timeZone) }\n      </div>\n    </main>\n  )\n}\n\nexport default Clock\n","import React, { useContext, useState, useRef, useEffect } from 'react'\nimport { TimeZoneContext } from '../contexts/TimeZoneContext'\nimport { TimeContext } from '../contexts/TimeContext'\n\nconst TimeZonePicker = () => {\n  const { getTimeZones, setTimeZone, formatName } = useContext(TimeZoneContext)\n  const { time } = useContext(TimeContext)\n  const [matches, setMatches] = useState([])\n  const searchBar = useRef()\n\n  useEffect(\n    () => {\n      document.addEventListener('click', handleClickAway)\n      return(\n        () => document.removeEventListener('click', handleClickAway)\n      )\n    },\n    []\n  )\n\n  const handleClickAway = (event) => {\n    if (!event.target.closest('#search')) {\n      setMatches([])\n    }\n  }\n\n  const handleSelection = (timeZone) => {\n    setTimeZone(timeZone)\n    setMatches([])\n    searchBar.current.value = \"\"\n  }\n\n  const search = () => {\n    const query = searchBar.current.value\n    setMatches(getTimeZones(query))\n  }\n\n  return(\n    <div id=\"search\">\n      <input\n        id=\"search-bar\"\n        type=\"text\"\n        autoComplete=\"off\"\n        placeholder=\"Search\"\n        onChange={search}\n        onFocus={search}\n        ref={searchBar}\n      />\n      <ul id=\"search-results\" >\n        {\n          matches.map(timeZone => {\n            const localTime = time.toLocaleTimeString(\"en-US\", { timeZone })\n            const displayName = formatName(timeZone)\n            return(\n              <li\n                key={timeZone}\n                onClick={ () => handleSelection(timeZone) }\n              >\n                <span className=\"zone-name\">\n                  {displayName}\n                </span>\n                <span className=\"local-time\">\n                  {localTime}\n                </span>\n              </li>\n            )\n          })\n        }\n      </ul>\n    </div>\n  )\n}\n\nexport default TimeZonePicker\n","import React from 'react'\nimport { TimeProvider } from './contexts/TimeContext'\nimport { TimeZoneProvider } from './contexts/TimeZoneContext'\nimport Clock from './components/Clock'\nimport TimeZonePicker from './components/TimeZonePicker'\n\nconst App = () => (\n  <TimeProvider>\n    <TimeZoneProvider>\n      <Clock/>\n      <TimeZonePicker/>\n    </TimeZoneProvider>\n  </TimeProvider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}